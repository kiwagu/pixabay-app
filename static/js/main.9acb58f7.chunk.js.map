{"version":3,"sources":["context/images.js","consts/index.js","services/images.js","pages/HomePage.js","pages/ImageSearchPage.js","pages/ImagePage.js","components/TopBar.js","App.js","reportWebVitals.js","index.js"],"names":["ImagesContext","createContext","Provider","imagesStore","ImagesProvider","children","useState","images","setImages","value","context","masonryOptions","transitionDuration","columnWidth","itemSelector","percentPosition","horizontalOrder","axios","require","API_URL","getImages","page","get","process","REACT_APP_APIKEY","searchImages","keyword","getImageById","imageId","HomePage","useContext","setPage","total","setTotal","initialized","setInitialized","getAllImages","useCallback","a","pg","response","concat","data","hits","useEffect","className","pageStart","loadMore","hasMore","length","elementType","options","disableImagesLoaded","updateOnEachImageLoad","map","img","i","to","id","src","webformatURL","alt","schema","yup","required","ImageSearchPage","setKeyword","searching","setSearching","handleSubmit","evt","validate","searchAllImages","imgs","getMoreImages","validationSchema","onSubmit","initialValues","handleChange","values","touched","errors","Form","noValidate","Row","style","margin","Group","as","Col","md","controlId","Label","Control","type","name","placeholder","onChange","isInvalid","Feedback","Button","ImagePage","match","params","find","image","String","setImage","serverResponse","largeImageURL","tags","console","log","details","data-toggle","data-placement","title","user","likes","views","downloads","webformatHeight","webformatWidth","withRouter","location","React","Navbar","bg","expand","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","Link","active","pathname","history","createHistory","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9acb58f7.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\n\nexport const ImagesContext = createContext(null);\n\nconst { Provider } = ImagesContext;\n\nconst imagesStore = [];\n\nconst ImagesProvider = ({ children }) => {\n  const [images, setImages] = useState(imagesStore);\n\n  return <Provider value={[images, setImages]}>{children}</Provider>;\n};\n\nImagesProvider.context = ImagesContext;\n\nexport default ImagesProvider;\n","export const masonryOptions = {\n  transitionDuration: 0,\n  columnWidth: '.grid-sizer',\n  itemSelector: '.grid-item',\n  percentPosition: true,\n  horizontalOrder: true,\n};\n","const axios = require('axios');\nconst SITE_URL = 'https://pixabay.com';\nconst API_URL = `${SITE_URL}/api`;\n\nexport const getImages = (page = 1) =>\n  axios.get(`${API_URL}/?page=${page}&key=${process.env.REACT_APP_APIKEY}`);\n\nexport const searchImages = (keyword, page = 1) =>\n  axios.get(\n    `${API_URL}/?page=${page}&key=${process.env.REACT_APP_APIKEY}&q=${keyword}`\n  );\n\nexport const getImageById = (imageId) =>\n  axios.get(`${API_URL}/?key=${process.env.REACT_APP_APIKEY}&id=${imageId}`);\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Masonry from 'react-masonry-component';\nimport { Link } from 'react-router-dom';\n\nimport { masonryOptions } from '../consts';\nimport { getImages } from '../services/images';\nimport { ImagesContext } from '../context/images';\n\nfunction HomePage() {\n  const [images, setImages] = useContext(ImagesContext);\n  const [page, setPage] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [initialized, setInitialized] = useState(false);\n  const getAllImages = useCallback(\n    async (pg = 1) => {\n      const response = await getImages(page);\n      setImages(images.concat(response.data.hits));\n      setTotal(response.data.total);\n      pg++;\n      setPage(pg);\n    },\n    [images, page, setImages]\n  );\n\n  useEffect(() => {\n    if (!initialized) {\n      getAllImages();\n      setInitialized(true);\n    }\n  }, [initialized, getAllImages]);\n\n  return (\n    <div className=\"page\">\n      <h1 className=\"text-center\">Home</h1>\n      <InfiniteScroll\n        pageStart={1}\n        loadMore={getAllImages}\n        hasMore={total > images.length}\n      >\n        <Masonry\n          className={'grid'}\n          elementType={'div'}\n          options={masonryOptions}\n          disableImagesLoaded={false}\n          updateOnEachImageLoad={false}\n        >\n          {/* .grid-sizer empty element, only used for element sizing */}\n          <div className=\"grid-sizer\"></div>\n          {images.map((img, i) => {\n            // console.log(i, img.webformatURL.substr(24));\n\n            return (\n              <div key={i}>\n                <Link to={`/image/${img.id}`}>\n                  <img\n                    src={img.webformatURL}\n                    alt=\"thumbnamil\"\n                    className=\"card grid-item\"\n                  />\n                </Link>\n              </div>\n            );\n          })}\n        </Masonry>\n      </InfiniteScroll>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import React, { useContext, useState } from 'react';\nimport { Formik } from 'formik';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport * as yup from 'yup';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport Masonry from 'react-masonry-component';\nimport { masonryOptions } from '../consts';\nimport { searchImages } from '../services/images';\nimport { Link } from 'react-router-dom';\nimport { ImagesContext } from '../context/images';\n\nconst schema = yup.object({\n  keyword: yup.string().required('Keyword is required'),\n});\n\nfunction ImageSearchPage() {\n  const [images, setImages] = useContext(ImagesContext);\n  const [keyword, setKeyword] = useState([]);\n  const [page, setPage] = useState(1);\n  const [total, setTotal] = useState(0);\n  const [searching, setSearching] = useState(false);\n\n  const handleSubmit = async (evt) => {\n    const isValid = await schema.validate(evt);\n    if (!isValid) {\n      return;\n    }\n    setKeyword(evt?.keyword);\n    searchAllImages(evt?.keyword, 1);\n  };\n\n  const searchAllImages = async (keyword, pg = 1) => {\n    setSearching(true);\n    const response = await searchImages(keyword, page);\n    let imgs = response.data.hits;\n    setImages(imgs);\n    setTotal(response.data.total);\n    setPage(pg);\n  };\n\n  const getMoreImages = async () => {\n    let pg = page;\n    pg++;\n    const response = await searchImages(keyword, pg);\n    setImages(images.concat(response.data.hits));\n    setTotal(response.data.total);\n    setPage(pg);\n  };\n\n  return (\n    <div className=\"page container\">\n      <div className=\"row text-center\">\n        <div className=\"col-10 mx-auto\">\n          <h1 className=\"text-center\">Search</h1>\n          <Formik\n            validationSchema={schema}\n            onSubmit={handleSubmit}\n            initialValues={{ keyword: '' }}\n          >\n            {({ handleSubmit, handleChange, values, touched, errors }) => (\n              <Form noValidate onSubmit={handleSubmit}>\n                <Form.Row style={{ margin: 0 }}>\n                  <Form.Group as={Col} md=\"12\" controlId=\"keyword\">\n                    <Form.Label>Keyword</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      name=\"keyword\"\n                      placeholder=\"Keyword\"\n                      value={values.keyword || ''}\n                      onChange={handleChange}\n                      isInvalid={touched.keyword && errors.keyword}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      {errors.keyword}\n                    </Form.Control.Feedback>\n                  </Form.Group>\n                </Form.Row>\n                <Button type=\"submit\">Search</Button>\n              </Form>\n            )}\n          </Formik>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <br />\n          <InfiniteScroll\n            pageStart={1}\n            loadMore={getMoreImages}\n            hasMore={searching && total > images.length}\n          >\n            <Masonry\n              className={'grid'}\n              elementType={'div'}\n              options={masonryOptions}\n              disableImagesLoaded={false}\n              updateOnEachImageLoad={false}\n            >\n              {/* .grid-sizer empty element, only used for element sizing */}\n              <div className=\"grid-sizer\"></div>\n              {images.map((img, i) => {\n                return (\n                  <div key={i}>\n                    <Link to={`/image/${img.id}`}>\n                      <img\n                        src={img.webformatURL}\n                        alt=\"thumbnamil\"\n                        className=\"card grid-item\"\n                      />\n                    </Link>\n                  </div>\n                );\n              })}\n            </Masonry>\n          </InfiniteScroll>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ImageSearchPage;\n","import React, { useContext, useEffect, useState } from 'react';\nimport { ImagesContext } from '../context/images';\nimport { getImageById } from '../services/images';\n\nimport './ImagePage.css';\n\nconst notFoundImageUrl =\n  'https://pixabay.com/get/50e8dd4a4c57b10ff3d8992cc621317b143bd8e44e5077497c267fd0934ec3_640.png';\n\nfunction ImagePage({ match }) {\n  const [images] = useContext(ImagesContext);\n  const { imageId } = match.params;\n  let [image, setImage] = useState(\n    images.find((image) => String(image.id) === imageId)\n  );\n  useEffect(() => {\n    (async () => {\n      if (!image) {\n        try {\n          const serverResponse = await getImageById(imageId);\n          const {\n            data: { hits: images },\n          } = serverResponse;\n          setImage(images[0]);\n        } catch (_) {\n          setImage({\n            largeImageURL: notFoundImageUrl,\n            tags: 'Not found',\n          });\n        }\n      }\n      console.log('image', image);\n    })();\n  });\n  const details = image && (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-lg-8\">\n          <div className=\"photo-img\">\n            <img src={image.largeImageURL} alt=\"photography\" />\n          </div>\n        </div>\n        <div className=\"col-lg-4\">\n          <div className=\"photo-details\">\n            <p>\n              <i\n                className=\"fas fa-file-alt fa-fw\"\n                data-toggle=\"tooltip\"\n                data-placement=\"top\"\n                title=\"Bio\"\n              />\n              Tags: {image.tags}\n            </p>\n            <ul>\n              <li>\n                <i\n                  className=\"far fa-user fa-fw\"\n                  data-toggle=\"tooltip\"\n                  data-placement=\"top\"\n                  title=\"User\"\n                />\n                {image.user}\n              </li>\n              <li>\n                <i\n                  className=\"far fa-thumbs-up fa-fw\"\n                  data-placement=\"top\"\n                  title=\"Likes\"\n                />\n                {image.likes}\n              </li>\n              <li>\n                <i\n                  className=\"far fa-eye fa-fw\"\n                  data-toggle=\"tooltip\"\n                  data-placement=\"top\"\n                  title=\"Views\"\n                />\n                {image.views}\n              </li>\n              <li>\n                <i\n                  className=\"fas fa-download fa-fw\"\n                  data-toggle=\"tooltip\"\n                  data-placement=\"top\"\n                  title=\"Download\"\n                />\n                {image.downloads}\n              </li>\n              <li>\n                <i\n                  className=\"fas fa-arrows-alt fa-fw\"\n                  data-toggle=\"tooltip\"\n                  data-placement=\"top\"\n                  title=\"Original size\"\n                />\n                {image.webformatHeight}x{image.webformatWidth} pixel\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-center\">Image details</h1>\n      {/* {image && <img src={image.largeImageURL} alt={image.tags} />} */}\n      {details}\n    </div>\n  );\n}\n\nexport default ImagePage;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport { withRouter } from 'react-router-dom';\n\nfunction TopBar({ location }) {\n  React.useEffect(() => {});\n\n  return (\n    <Navbar bg=\"primary\" expand=\"lg\" variant=\"dark\">\n      <Navbar.Brand href=\"/\">Photo App</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"/\" active={location.pathname === '/'}>\n            Home\n          </Nav.Link>\n          <Nav.Link\n            href=\"/imagesearch\"\n            active={location.pathname === '/imagesearch'}\n          >\n            Search\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default withRouter(TopBar);\n","import React from 'react';\nimport { Router, Route } from 'react-router-dom';\nimport { createBrowserHistory as createHistory } from 'history';\n\nimport ImagesProvider from './context/images';\nimport HomePage from './pages/HomePage';\nimport ImageSearchPage from './pages/ImageSearchPage';\nimport ImagePage from './pages/ImagePage';\nimport TopBar from './components/TopBar';\n\nimport './App.css';\n\nconst history = createHistory();\n\nfunction App() {\n  return (\n    <ImagesProvider>\n      <div className=\"App\">\n        <Router history={history}>\n          <TopBar />\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/imagesearch\" exact component={ImageSearchPage} />\n          <Route path=\"/image/:imageId\" exact component={ImagePage} />\n        </Router>\n      </div>\n    </ImagesProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}